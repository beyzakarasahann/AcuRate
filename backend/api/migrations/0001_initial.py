# Generated by Django 5.2.7 on 2025-10-31 16:10

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ProgramOutcome',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Unique PO code (e.g., PO1, PO2)', max_length=10, unique=True)),
                ('title', models.CharField(help_text='PO title (e.g., Engineering Knowledge)', max_length=200)),
                ('description', models.TextField(help_text='Detailed description of the program outcome')),
                ('department', models.CharField(help_text='Department this PO belongs to', max_length=100)),
                ('target_percentage', models.DecimalField(decimal_places=2, default=70.0, help_text='Target achievement percentage (default: 70%)', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('is_active', models.BooleanField(default=True, help_text='Whether this PO is currently active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Program Outcome',
                'verbose_name_plural': 'Program Outcomes',
                'db_table': 'program_outcomes',
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('STUDENT', 'Student'), ('TEACHER', 'Teacher'), ('INSTITUTION', 'Institution')], default='STUDENT', help_text='User role in the system', max_length=20)),
                ('email', models.EmailField(help_text="User's email address", max_length=254, unique=True)),
                ('phone', models.CharField(blank=True, help_text='Contact phone number', max_length=20, null=True)),
                ('profile_picture', models.ImageField(blank=True, help_text="User's profile picture", null=True, upload_to='profile_pictures/')),
                ('student_id', models.CharField(blank=True, help_text='Unique student ID (for students only)', max_length=20, null=True, unique=True)),
                ('department', models.CharField(blank=True, help_text='Department name (e.g., Computer Science)', max_length=100, null=True)),
                ('year_of_study', models.IntegerField(blank=True, help_text='Current year of study (1-6)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(6)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
                'ordering': ['-created_at'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Course code (e.g., CS101)', max_length=20)),
                ('name', models.CharField(help_text='Course name', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Course description')),
                ('department', models.CharField(help_text='Department offering this course', max_length=100)),
                ('credits', models.IntegerField(help_text='Number of credits (1-10)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('semester', models.IntegerField(choices=[(1, 'Fall'), (2, 'Spring'), (3, 'Summer')], help_text='Semester when course is offered')),
                ('academic_year', models.CharField(help_text='Academic year (e.g., 2024-2025)', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('teacher', models.ForeignKey(help_text='Teacher assigned to this course', limit_choices_to={'role': 'TEACHER'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='courses_teaching', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Course',
                'verbose_name_plural': 'Courses',
                'db_table': 'courses',
                'ordering': ['code', '-academic_year'],
            },
        ),
        migrations.CreateModel(
            name='Enrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enrolled_at', models.DateTimeField(auto_now_add=True, help_text='Enrollment date')),
                ('is_active', models.BooleanField(default=True, help_text='Whether enrollment is currently active')),
                ('final_grade', models.DecimalField(blank=True, decimal_places=2, help_text='Final grade for the course (0-100)', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(help_text='Course', on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='api.course')),
                ('student', models.ForeignKey(help_text='Enrolled student', limit_choices_to={'role': 'STUDENT'}, on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Enrollment',
                'verbose_name_plural': 'Enrollments',
                'db_table': 'enrollments',
                'ordering': ['-enrolled_at'],
                'unique_together': {('student', 'course')},
            },
        ),
        migrations.AddField(
            model_name='course',
            name='enrolled_students',
            field=models.ManyToManyField(help_text='Students enrolled in this course', related_name='enrolled_courses', through='api.Enrollment', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='CoursePO',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight', models.DecimalField(decimal_places=2, default=1.0, help_text='Weight/importance of this PO in the course (default: 1.0)', max_digits=5, validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(10.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(help_text='Course', on_delete=django.db.models.deletion.CASCADE, related_name='course_pos', to='api.course')),
                ('program_outcome', models.ForeignKey(help_text='Program Outcome', on_delete=django.db.models.deletion.CASCADE, related_name='course_pos', to='api.programoutcome')),
            ],
            options={
                'verbose_name': 'Course-PO Mapping',
                'verbose_name_plural': 'Course-PO Mappings',
                'db_table': 'course_program_outcomes',
                'unique_together': {('course', 'program_outcome')},
            },
        ),
        migrations.AddField(
            model_name='course',
            name='program_outcomes',
            field=models.ManyToManyField(help_text='Program outcomes covered by this course', related_name='courses', through='api.CoursePO', to='api.programoutcome'),
        ),
        migrations.CreateModel(
            name='Assessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Assessment title (e.g., Midterm Exam 1)', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Assessment description')),
                ('assessment_type', models.CharField(choices=[('MIDTERM', 'Midterm Exam'), ('FINAL', 'Final Exam'), ('QUIZ', 'Quiz'), ('HOMEWORK', 'Homework'), ('PROJECT', 'Project'), ('LAB', 'Lab Work'), ('PRESENTATION', 'Presentation'), ('OTHER', 'Other')], help_text='Type of assessment', max_length=20)),
                ('weight', models.DecimalField(decimal_places=2, help_text='Weight in final grade (%)', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('max_score', models.DecimalField(decimal_places=2, default=100.0, help_text='Maximum possible score', max_digits=6, validators=[django.core.validators.MinValueValidator(0)])),
                ('due_date', models.DateTimeField(blank=True, help_text='Due date/exam date', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this assessment is currently active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(help_text='Course this assessment belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='assessments', to='api.course')),
                ('related_pos', models.ManyToManyField(help_text='Program outcomes this assessment evaluates', related_name='assessments', to='api.programoutcome')),
            ],
            options={
                'verbose_name': 'Assessment',
                'verbose_name_plural': 'Assessments',
                'db_table': 'assessments',
                'ordering': ['course', 'due_date'],
            },
        ),
        migrations.AlterUniqueTogether(
            name='course',
            unique_together={('code', 'academic_year')},
        ),
        migrations.CreateModel(
            name='StudentGrade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.DecimalField(decimal_places=2, help_text='Score received', max_digits=6, validators=[django.core.validators.MinValueValidator(0)])),
                ('feedback', models.TextField(blank=True, help_text="Teacher's feedback")),
                ('graded_at', models.DateTimeField(auto_now_add=True, help_text='When the grade was recorded')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assessment', models.ForeignKey(help_text='Assessment', on_delete=django.db.models.deletion.CASCADE, related_name='grades', to='api.assessment')),
                ('student', models.ForeignKey(help_text='Student', limit_choices_to={'role': 'STUDENT'}, on_delete=django.db.models.deletion.CASCADE, related_name='grades', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Student Grade',
                'verbose_name_plural': 'Student Grades',
                'db_table': 'student_grades',
                'ordering': ['-graded_at'],
                'unique_together': {('student', 'assessment')},
            },
        ),
        migrations.CreateModel(
            name='StudentPOAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_percentage', models.DecimalField(decimal_places=2, help_text='Current achievement percentage', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('total_assessments', models.IntegerField(default=0, help_text='Total number of assessments for this PO')),
                ('completed_assessments', models.IntegerField(default=0, help_text='Number of completed assessments')),
                ('last_calculated', models.DateTimeField(auto_now=True, help_text='When this achievement was last calculated')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('program_outcome', models.ForeignKey(help_text='Program Outcome', on_delete=django.db.models.deletion.CASCADE, related_name='student_achievements', to='api.programoutcome')),
                ('student', models.ForeignKey(help_text='Student', limit_choices_to={'role': 'STUDENT'}, on_delete=django.db.models.deletion.CASCADE, related_name='po_achievements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Student PO Achievement',
                'verbose_name_plural': 'Student PO Achievements',
                'db_table': 'student_po_achievements',
                'ordering': ['student', 'program_outcome'],
                'unique_together': {('student', 'program_outcome')},
            },
        ),
    ]
